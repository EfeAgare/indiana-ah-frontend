// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`It should render the comment item component 1`] = `
<CommentItem
  auth={
    Object {
      "isVerified": true,
    }
  }
  comment={
    Object {
      "articleId": 1,
      "commentBody": "We are africans",
      "commenter": Object {
        "imageUrl": "goal.com/en-gb",
        "name": "omenkish",
        "username": "Omenkish",
      },
      "createdAt": "1970-01-01T00:00:00.000Z",
      "id": 1,
      "updatedAt": "1970-01-01T00:00:00.010Z",
      "userId": 1,
    }
  }
  deleteComment={[MockFunction]}
  editComment={[MockFunction]}
  editHistory={
    Array [
      Object {
        "articleId": 1,
        "commentBody": "We are africans",
        "commenter": Object {
          "imageUrl": "goal.com/en-gb",
          "name": "omenkish",
          "username": "Omenkish",
        },
        "createdAt": "1970-01-01T00:00:00.000Z",
        "id": 1,
        "updatedAt": "1970-01-01T00:00:00.010Z",
        "userId": 1,
      },
      Object {
        "articleId": 2,
        "commentBody": "We are africans",
        "commenter": Object {
          "imageUrl": "goal.com/en-gb/hello-world",
          "name": "omenkish Baller",
          "username": "omenkish",
        },
        "createdAt": "1969-12-31T23:59:50.000Z",
        "id": 2,
        "updatedAt": "1970-01-01T00:00:00.010Z",
        "userId": 2,
      },
    ]
  }
  getCommentEditHistory={[MockFunction]}
  isLoading={false}
  reactToComment={[MockFunction]}
  user={
    Object {
      "userData": Object {
        "id": 1,
        "imageUrl": "www.my-url.com",
        "name": "omenkish",
        "username": "omenkish",
      },
    }
  }
>
  <div
    className="comment-item-section"
  >
    <div
      className="row"
    >
      <div
        className="col-xs-3"
      >
        <img
          alt=""
          className="image"
          src="goal.com/en-gb"
        />
      </div>
      <div
        className="col-xs-5 ml-3"
      >
        <p
          className="text-center"
        >
          <b>
            Omenkish
          </b>
        </p>
      </div>
      <div
        className="col-xs-4"
      >
        <i
          className="far fa-clock 2x"
        >
           
        </i>
        <span
          className="comment-time"
        >
           
            
          49 years ago
        </span>
         
        <Badge
          pill={true}
          variant="secondary"
        >
          <span
            className="badge badge-pill badge-secondary"
          >
            Edited
          </span>
        </Badge>
      </div>
    </div>
    <div
      className="row"
    >
      <div
        className="col-md-11 pl-10"
      >
        <p
          className="comment-body"
        >
          We are africans
        </p>
      </div>
      <Dropdown
        as="div"
        navbar={false}
      >
        <ReactOverlaysDropdown
          itemSelector=".dropdown-item:not(.disabled):not(:disabled)"
          onToggle={[Function]}
        >
          <Manager>
            <div
              className="dropdown"
              onKeyDown={[Function]}
            >
              <Bootstrap(DropdownToggle)>
                <DropdownToggle
                  as={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": Object {
                        "active": false,
                        "disabled": false,
                        "type": "button",
                        "variant": "primary",
                      },
                      "displayName": "Button",
                      "render": [Function],
                    }
                  }
                  bsPrefix="dropdown-toggle"
                >
                  <ReactOverlaysDropdownToggle>
                    <Button
                      active={false}
                      aria-expanded={false}
                      aria-haspopup={true}
                      className="dropdown-toggle"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup={true}
                        className="dropdown-toggle btn btn-primary"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        ⋮
                      </button>
                    </Button>
                  </ReactOverlaysDropdownToggle>
                </DropdownToggle>
              </Bootstrap(DropdownToggle)>
              <DropdownMenu
                alignRight={false}
                as="div"
                className="dropdown-menu"
                flip={true}
              >
                <ForwardRef(ContextTransform(DropdownMenu))
                  alignEnd={false}
                  flip={true}
                  usePopper={true}
                >
                  <ReactOverlaysDropdownMenu
                    alignEnd={false}
                    flip={true}
                    menuRef={[Function]}
                    onToggle={[Function]}
                    toggleNode={
                      <button
                        aria-expanded="false"
                        aria-haspopup="true"
                        class="dropdown-toggle btn btn-primary"
                        type="button"
                      >
                        ⋮
                      </button>
                    }
                    usePopper={true}
                  />
                </ForwardRef(ContextTransform(DropdownMenu))>
              </DropdownMenu>
            </div>
          </Manager>
        </ReactOverlaysDropdown>
      </Dropdown>
    </div>
    <div
      className="row comment-reaction"
    >
      <div
        className="col-xs-6 ml-6"
      >
         
        <i
          className="far fa-thumbs-up mr-2"
          onClick={[Function]}
        />
        <small />
      </div>
      <div
        className="col-xs-6 ml-5"
      >
        <i
          className="far fa-thumbs-down mr-2"
          onClick={[Function]}
        />
        <small />
      </div>
    </div>
  </div>
  <div
    className="add-comment-box"
  >
    <div
      className="card-body comment-form"
    >
      <h1
        className="mb-5"
      >
         Edit Comment
      </h1>
      <Form
        as="form"
        inline={false}
      >
        <form
          className=""
        >
          <div
            className="form-group"
          >
            <FormGroup
              as="div"
            >
              <div
                className="form-group"
              >
                <div
                  className="row"
                >
                  <div
                    className="col-xs-3"
                  >
                    <img
                      src="www.my-url.com"
                    />
                  </div>
                  <div
                    className="col-xs-9"
                  >
                    <TextareaAutosize
                      className="comment-textarea"
                      inputRef={[Function]}
                      name="text"
                      onChange={[Function]}
                      onHeightChange={[Function]}
                      rows="1"
                      useCacheForDOMMeasurements={false}
                      value="We are africans"
                    >
                      <textarea
                        className="comment-textarea"
                        name="text"
                        onChange={[Function]}
                        rows="1"
                        style={
                          Object {
                            "height": 0,
                          }
                        }
                        value="We are africans"
                      />
                    </TextareaAutosize>
                  </div>
                </div>
              </div>
            </FormGroup>
            <FormGroup
              as="div"
            >
              <div
                className="form-group"
              >
                <div
                  className="edit"
                >
                  <styled.button
                    className="mr-4 edit-button"
                    onClick={[Function]}
                  >
                    <StyledComponent
                      className="mr-4 edit-button"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "heDKJk",
                            "rules": Array [
                              "
  background: ",
                              [Function],
                              "
  font-size: 2rem;
  line-height: 2.7rem;
  align: Center;
  letterspacing: 5%;
  margin: ",
                              [Function],
                              ";
  height: ",
                              [Function],
                              ";
  border-radius: 0.4rem;
  text-align: center;
  color: ",
                              [Function],
                              "
  cursor: pointer;
  border: ",
                              [Function],
                              "
  text-transform: capitalize;
  transition: all 0.3s;
  width: ",
                              [Function],
                              ";
  padding: ",
                              [Function],
                              ";
  display: ",
                              [Function],
                              ";
  :disabled {
    color: #dddddd;
    border: 0.2rem solid #dddddd;
  }
  @media (max-width: 830px) {
    width: auto;
    line-height: 2rem;
    font-size: 1.7rem;
  }
  @media (max-width: 355px) {
    width: auto;
    line-height: 1.5rem;
    padding: ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="mr-4 edit-button sc-bdVaJa heDKJk"
                        onClick={[Function]}
                      >
                        Cancel
                      </button>
                    </StyledComponent>
                  </styled.button>
                  <span
                    className="span"
                  />
                  <styled.button
                    className="mr-4 edit-button "
                    onClick={[Function]}
                  >
                    <StyledComponent
                      className="mr-4 edit-button "
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "heDKJk",
                            "rules": Array [
                              "
  background: ",
                              [Function],
                              "
  font-size: 2rem;
  line-height: 2.7rem;
  align: Center;
  letterspacing: 5%;
  margin: ",
                              [Function],
                              ";
  height: ",
                              [Function],
                              ";
  border-radius: 0.4rem;
  text-align: center;
  color: ",
                              [Function],
                              "
  cursor: pointer;
  border: ",
                              [Function],
                              "
  text-transform: capitalize;
  transition: all 0.3s;
  width: ",
                              [Function],
                              ";
  padding: ",
                              [Function],
                              ";
  display: ",
                              [Function],
                              ";
  :disabled {
    color: #dddddd;
    border: 0.2rem solid #dddddd;
  }
  @media (max-width: 830px) {
    width: auto;
    line-height: 2rem;
    font-size: 1.7rem;
  }
  @media (max-width: 355px) {
    width: auto;
    line-height: 1.5rem;
    padding: ",
                              [Function],
                              ";
  }
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="mr-4 edit-button  sc-bdVaJa heDKJk"
                        onClick={[Function]}
                      >
                        Submit
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </div>
            </FormGroup>
          </div>
        </form>
      </Form>
    </div>
  </div>
  <CustomModal
    body={
      <div>
        <section
          className="comment-modal"
        >
          <h2>
             Are you sure you want to delete this comment?
          </h2>
        </section>
        <section
          className="d-flex justify-content-center mb-5"
        >
          <ForwardRef
            className="mr-4"
            onClick={[Function]}
            sm={true}
          >
            Cancel
          </ForwardRef>
          <ForwardRef
            danger={true}
            onClick={[Function]}
            sm={true}
          >
            Delete
          </ForwardRef>
        </section>
      </div>
    }
    closeModal={[Function]}
    customClass={false}
    modalIsOpen={false}
  >
    <div>
      <Bootstrap(Modal)
        dialogClassName="Modal false"
        onHide={[Function]}
        show={false}
      >
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsPrefix="modal"
          dialogAs={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "ModalDialog",
              "render": [Function],
            }
          }
          dialogClassName="Modal false"
          enforceFocus={true}
          keyboard={true}
          manager={
            BootstrapModalManager {
              "adjustAndStore": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "modals": Array [],
              "restore": [Function],
              "scrollbarSize": 0,
            }
          }
          onHide={[Function]}
          restoreFocus={true}
          show={false}
        >
          <Modal
            autoFocus={true}
            backdrop={true}
            backdropTransition={[Function]}
            className="modal"
            containerClassName="modal-open"
            enforceFocus={true}
            keyboard={true}
            manager={
              BootstrapModalManager {
                "adjustAndStore": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "modals": Array [],
                "restore": [Function],
                "scrollbarSize": 0,
              }
            }
            onClick={[Function]}
            onEnter={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            onMouseUp={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            role="dialog"
            show={false}
            style={Object {}}
            transition={[Function]}
          />
        </Modal>
      </Bootstrap(Modal)>
    </div>
  </CustomModal>
</CommentItem>
`;
